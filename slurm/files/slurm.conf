## Managed by salt ##
#
# slurm.conf SLURM config file
#

{% set slurm_conf = pillar.get('slurm', {}) -%}

{%- macro slurmconf(field,default) -%}
{%- if field in slurm_conf -%}
{{field}}={{slurm_conf.get(field)}}
{%- else -%}
# {{field}}={{default}}
{% endif -%}
{%- endmacro -%}

{%- macro slurmconf_prefix(field, default,prefix) -%}
{%- if field in slurm_conf -%}
{{field}}={{prefix}}/{{slurm_conf.get(field)}}
{%- else -%}
# {{field}}={{default}}
{% endif -%}
{%- endmacro -%}

## Basic configuration
ClusterName={{ slurm_conf.ClusterName }}
ControlMachine={{ slurm_conf.ControlMachine }}
{{ slurmconf('ControlAddr',slurm_conf.ControlMachine) -}}
{{ slurmconf('BackupController','') -}}
{{ slurmconf('BackupAddr','') -}}

SlurmUser=slurm
{{ slurmconf('SlurmdUser', 'root') -}}
{{ slurmconf('SlurmctldPort', '6817') -}}
{{ slurmconf('SlurmdPort', '6818') -}}
SlurmdSpoolDir={{slurm.slurmddir}}
StateSaveLocation={{slurm.slurmctlddir}}
SlurmctldPidFile={{slurm.rundir}}/slurmctld.pid
SlurmdPidFile={{slurm.rundir}}/slurmd.pid
{{ slurmconf_prefix('AuthType', 'munge', 'auth') -}}
{{ slurmconf_prefix('CryptoType', 'munge', 'crypto') -}}

## Timers

## Scheduling

## Logging

{{ slurmconf('SlurmctldDebug', 'info') }}
{{ slurmconf('SlurmdDebug', 'info') }}
{{ slurmconf('SlurmSchedLogLevel, '0') }}
{% if SlurmctldLogFile in slurm_conf -%}
SlurmctldLogFile={{ slurm_conf.SlurmctldLogFile }}
{%- else -%}
SlurmctldLogFile={{slurm.logdir}}/slurmctld.log
{%- endif %}
{% if SlurmdLogFile in slurm_conf -%}
SlurmdLogFile={{ slurm_conf.SlurmdLogFile }}
{%- else -%}
SlurmdLogFile={{slurm.logdir}}/slurmd.log
{%- endif %}
{% if SlurmSchedLogFile in slurm_conf -%}
SlurmSchedLogFile={{ slurm_conf.SlurmSchedLogFile }}
{%- else -%}
SlurmSchedLogFile={{slurm.logdir}}/slurm_sched.log
{%- endif %}

## Accounting

## Checkpointing

{{ slurmconf('CacheGroups','0') -}}


#DisableJobs=NO
#EnforcePartLimits=NO
#Epilog=
#EpilogSlurmctld=
#FirstJobId=1
#MaxJobId=999999
#GresTypes=
#GroupUpdateForce=0
#GroupUpdateTime=600
#JobCheckpointDir=/var/slurm/checkpoint
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=

#JobFileAppend=0
#JobRequeue=1
#JobSubmitPlugins=1
#KillOnBadExit=0
#Licenses=foo*4,bar
{% if 'MailProg' in pillar['slurm']  -%}
MailProg={{ salt['pillar.get']('slurm:MailProg')}}
{% endif -%}
MaxJobCount={{ salt['pillar.get']('slurm:MaxJobCount','5000' )}}
#MaxStepCount=40000
#MaxTasksPerNode=128
MaxArraySize= {{ salt['pillar.get']('slurm:MaxArraySize','1001' )}}
MpiDefault=none
MpiParams=ports=12000-12999
#MpiParams=ports=#-#
PluginDir={{ slurm.plugindir }}
#PlugStackConfig=

PrivateData={{ salt['pillar.get']('slurm:PrivateData','accounts,users,usage,jobs' )}}

ProctrackType={{ salt['pillar.get']('slurm_config:ProctrackType','proctrack/cgroup' )}}
#Prolog=
#PrologSlurmctld=
#PropagatePrioProcess=0
{% if 'PropagateResourceLimits' in pillar['slurm']  -%}
PropagateResourceLimits={{ salt['pillar.get']('slurm:PropagateResourceLimits')}}
{% else -%}
#PropagateResourceLimits=
{% endif -%}
{% if 'PropagateResourceLimitsExcept' in pillar['slurm']  -%}
PropagateResourceLimitsExcept={{ salt['pillar.get']('slurm:PropagateResourceLimitsExcept')}}
{% else -%}
#PropagateResourceLimitsExcept=
{% endif -%}
ReturnToService=2
#SallocDefaultCommand=
#SrunEpilog=
#SrunProlog=
SwitchType=switch/none
#TaskEpilog=
{% if salt['pillar.get']('slurm:TaskPlugin') in ['affinity','none','cgroup'] -%}
TaskPlugin=task/{{ salt['pillar.get']('slurm:TaskPlugin')}}
{% else -%}
TaskPlugin=task/none
{% endif -%}
#TaskProlog=
{% if salt['pillar.get']('slurm:TopologyPlugin') in ['tree','none','3d_torus'] -%}
TopologyPlugin=topology/{{ salt['pillar.get']('slurm:TopologyPlugin')}}
{% else -%}
TopologyPlugin=topology/none
{% endif -%}
#TmpFs=/tmp
#TrackWCKey=no
#TreeWidth=
#UnkillableStepProgram=
#UsePAM=0
#
#
# TIMERS
#BatchStartTimeout=10
#CompleteWait=0
#EpilogMsgTime=2000
#GetEnvTimeout=2
#HealthCheckInterval=0
#HealthCheckProgram=
InactiveLimit=0
KillWait=30
#MessageTimeout=10
#ResvOverRun=0
MinJobAge=300
#OverTimeLimit=0
SlurmctldTimeout=120
SlurmdTimeout=300
#UnkillableStepTimeout=60
#VSizeFactor=0
Waittime=0
#
#
# SCHEDULING
#DefMemPerCPU=0
FastSchedule=1
#MaxMemPerCPU=0
#SchedulerFilter=1
#SchedulerTimeSlice=30
SchedulerType=sched/backfill
#SchedulerType=sched/builtin
#SchedulerPort=7321
SchedulerParameters=max_job_bf=1000,interval=30
SelectType=select/cons_res
SelectTypeParameters=CR_Core
PreemptType=preempt/partition_prio
PreemptMode=GANG,SUSPEND
#
#
# JOB PRIORITY
{% if salt['pillar.get']('slurm:PriorityType') in ['multifactor','basic'] -%}
PriorityType=priority/{{ salt['pillar.get']('slurm:PriorityType','basic' )}}
{% endif -%}
#PriorityDecayHalfLife=
#PriorityCalcPeriod=
#PriorityFavorSmall=
#PriorityMaxAge=
#PriorityUsageResetPeriod=
#PriorityWeightAge=
#PriorityWeightFairshare=
#PriorityWeightJobSize=
#PriorityWeightPartition=
#PriorityWeightQOS=
#
#
# LOGGING AND ACCOUNTING
AccountingStorageEnforce=1
#AccountingStorageEnforce=limits
AccountingStorageHost={{ salt['pillar.get']('slurm:AccountingStorageHost', '') }}
AccountingStorageLoc={{ salt['pillar.get']('slurm:AccountingStorageLoc', 'slurm_acct_db')}}
AccountingStoragePass={{ salt['pillar.get']('slurm:AccountingStoragePass','/var/run/munge/munge/munge.socket.2')}}
AccountingStoragePort={{ salt['pillar.get']('slurm:AccountingStoragePort','0' )}}
AccountingStorageType=accounting_storage/{{ salt['pillar.get']('slurm:AccountingStorageType','filetxt' )}}
AccountingStorageUser={{ salt['pillar.get']('slurm:AccountingStorageUser', '')}}
AccountingStoreJobComment=YES

#DebugFlags=
#JobCompHost=
JobCompLoc={{ salt['pillar.get']('slurm:JobCompLoc', slurm.logdir + '/slurm_jobcomp.log' )}}
#JobCompLoc=
#JobCompPass=
#JobCompPort=
JobCompType=jobcomp/filetxt
#JobCompUser=
JobAcctGatherFrequency=30
JobAcctGatherType=jobacct_gather/linux
{% if salt['pillar.get']('slurm:AcctGatherEnergyType') in ['none','ipmi','ibmaem','cray','rapi'] -%}
AcctGatherEnergyType=acct_gather_energy/{{ pillar['slurm']['AcctGatherEnergyType'] }}
{%- endif %}

#
#
# POWER SAVE SUPPORT FOR IDLE NODES (optional)
#SuspendProgram=
#ResumeProgram=
#SuspendTimeout=
#ResumeTimeout=
#ResumeRate=
#SuspendExcNodes=
#SuspendExcParts=
#SuspendRate=
#SuspendTime=
#
#

{% if salt['pillar.get']('slurm:CryptoType') in ['aix','blcr','none','ompi'] -%}
CheckpointType=checkpoint/{{salt['pillar.get']('slurm:CryptoType') }}
{% endif -%}

# COMPUTE NODES

{% if pillar['slurm']['nodes'] is defined -%}
{%- for node, nodeinfo in pillar['slurm']['nodes'].iteritems() %}
NodeName={{ node }} {% for key, value in nodeinfo.iteritems()  %} {{ key }}={{ value }} {% endfor -%}
{% endfor -%}
{% endif %}
{% if pillar['slurm']['partitions'] is defined -%}
{% set nodes=[] %}
{% for partition, partinfo in pillar['slurm']['partitions'].iteritems() -%}
PartitionName={{ partition }} {% for key, value in partinfo.iteritems() %} {% if key == 'nodes' %} Nodes={{ ','.join(value) }} {% else %}  {{ key }}={{ value }} {% endif %} {% endfor %}
{% endfor -%}
{% endif -%}



